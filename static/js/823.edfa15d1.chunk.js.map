{"version":3,"file":"static/js/823.edfa15d1.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","Redux/selectors.js","components/ContactForm.jsx","components/ContactList.jsx","components/Filter.jsx","pages/Contacts/Contacts.js"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","export const selectContacts = state => state.contacts.items;\nexport const selectStatusFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectUser = state => state.auth.user;\nexport const selectIsFetching = state => state.auth.isFetching;\nexport const selectIsRefreshing = state => state.auth.isRefreshing;\nexport const selectIsLoggedIn = state => state.auth.isLoggedIn;","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport {toast} from 'react-toastify'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact} from '../Redux/operations';\nimport css from \"../Modules/phoneBook.module.css\";\nimport { selectContacts } from '../Redux/selectors';\n\nconst ContactForm = () => {\n\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const [contactName, setcontactName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (contacts.some(({ name }) => name === contactName)) {\n      toast.info(`We're sorry, but ${contactName} is already in your contacts!`);\n      return;\n    }\n    dispatch(addContact({\n      name: contactName,\n      number,\n      id: nanoid(),\n      })\n    );\n\n    setcontactName('');\n    setNumber('');\n  };\n\n  const handleChange = e => {\n    const { value, name } = e.target;\n\n    switch (name) {\n      case 'name':\n        setcontactName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  return (\n    <form className={`${css.basicFont} ${css.form}`} onSubmit={handleSubmit}>\n    <label className={`${css.basicFont} ${css.label}`}>Name:\n    <input className={`${css.basicFont} ${css.input}`} type=\"text\" name=\"name\" value={contactName} onChange={handleChange}\n      pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n      title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      required\n    />\n    </label>\n    <label className={`${css.basicFont} ${css.label}`}>Number:\n    <input className={`${css.basicFont} ${css.input}`} type=\"tel\" name=\"number\" value={number} onChange={handleChange}\n     pattern=\"[0-9+]+\"\n     title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n     required\n    />\n    </label>\n    <button className={`${css.basicFont} ${css.button}`} type=\"submit\">Add Contact</button>\n</form>\n);\n};\n\n export default ContactForm;","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact, fetchContacts } from 'Redux/operations';\nimport PropTypes from 'prop-types';\nimport css from \"../Modules/phoneBook.module.css\";\nimport { useEffect } from 'react';\nimport { selectContacts, selectStatusFilter } from '../Redux/selectors';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filtered = useSelector(selectStatusFilter);\n\n  const normalizedFilter = filtered.toLowerCase();\n  const filteredContacts = contacts.filter(({ name }) => name.toLowerCase().includes(normalizedFilter));\n\n  useEffect ( () => {\n    dispatch(fetchContacts());\n  }, [dispatch])\n\n  return (\n    <ul className={css.contactsList}>\n      {filteredContacts.map(({ id, name, number }) => (\n      <li className={`${css.basicFont} ${css.contactInfo}`} key={id}>{name}: {number}\n      <button className={`${css.basicFont} ${css.buttonContacts}`} onClick={() => dispatch(deleteContact(id))}>Delete</button>\n      </li>\n      ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object),\n  onDeleteContact: PropTypes.func,\n};\n\nexport default ContactList;\n","import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {setFilter } from '../Redux/filterSlice';\nimport css from \"../Modules/phoneBook.module.css\";\nimport { selectStatusFilter } from '../Redux/selectors';\n\nfunction Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectStatusFilter);\n\n  const onChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <div>\n     <label className={`${css.basicFont} ${css.labelContacts}`}>Filter contacts by name:\n     <input className={`${css.basicFont} ${css.input}`} type=\"text\" value={filter}onChange={onChange}/>\n     </label>\n    </div>\n  );\n}\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  OnChange: PropTypes.func,\n};\n\nexport default Filter;\n","import ContactForm from \"components/ContactForm\";\nimport ContactList from \"components/ContactList\";\nimport Filter from \"components/Filter\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContacts } from \"Redux/operations\";\nimport { selectError, selectIsLoading } from \"Redux/selectors\";\nimport css from '../../Modules/phoneBook.module.css';\nimport cssPages from '../pages.module.css'\nimport { ThreeDots } from 'react-loader-spinner';\n\n\n\nexport default function Contacts() {\n    const dispatch = useDispatch();\n    const error = useSelector(selectError);\n    const isLoading = useSelector(selectIsLoading);\n    useEffect(() => {\n      dispatch(fetchContacts());\n    }, [dispatch]);\n    return (\n    <div className={cssPages.contactsContainer}>\n    <ContactForm/>\n    <Filter/>\n    {isLoading && !error && (\n      <div className={css.loadingOverlay}>\n      <b className={css.FetchLogo}><ThreeDots  height={290} width={300} color=\"#5a5aed\"/></b>\n      </div>\n      )}\n    <ContactList/>\n    </div>\n    );\n};\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","selectContacts","state","contacts","items","selectStatusFilter","filter","selectIsLoading","isLoading","selectError","error","useSelector","dispatch","useDispatch","useState","contactName","setcontactName","number","setNumber","handleChange","e","target","value","name","className","css","onSubmit","preventDefault","some","toast","addContact","type","onChange","pattern","title","required","normalizedFilter","toLowerCase","filteredContacts","includes","useEffect","fetchContacts","map","onClick","deleteContact","setFilter","Contacts","cssPages","height","width","color"],"sourceRoot":""}